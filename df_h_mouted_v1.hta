<!DOCTYPE html>
<html>
<head>
<title>'df -h' Disk Checks Formatting</title>
<meta charset="utf-8" />
<!--<meta http-equiv="x-ua-compatible" content="ie=edge" />-->
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<hta:application 
   id="formatDF"
   applicationName="directoryFormat"
   border="thick"
   borderStyle="sunken"
   caption="yes"
   contextMenu="yes"
   icon=""
   innerBorder="yes"
   maximizeButton="yes"
   minimizeButton="yes"
   navigable="no"
   scroll="yes"
   scrollFlat="no"
   selection="yes"
   showInTaskBar="yes"
   singleInstance="yes"
   sysMenu="yes"
   version="1.0"
   windowState="normal"
 />


<script language="vbscript" type="text/vbscript">
Function removingSpaces(addingFileName,writingFileName)	
    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objRead = objFSO.OpenTextFile (addingFileName, 1, True,-2)
    Set objWrite = objFSO.OpenTextFile (writingFileName, 8, True,-2)
        Do Until objRead.AtEndOfStream 
        strLine = objRead.ReadLine
        arrSpaceGap = Split (strLine, " ")
        p = ""
            For each n in arrSpaceGap
                If len(n) > 0 AND n <> " " Then
                    If p = " " Then
                        p = Trim(n)				
                    Else
                        p = p & "," & Trim(n)
                    End If
                End If
            Next
            If Len(p) > 1 Then
                objWrite.writeline p
            End If
        Loop
    objRead.close
    objWrite.close
    Set objFSO = Nothing
    Set objWrite = Nothing
    Set objRead = Nothing
End Function
Function HideWindow()
    intLeft = window.screenLeft
    intTop = window.screenTop
    window.moveTo -2000,-2000
    window.moveTo intLeft,intTop
End Function
Function sleepingVB()	
	Set oShell = CreateObject("WScript.Shell")
	cmd = "%COMSPEC% /c ping -n 1 127.0.0.1>nul"
	oShell.Run cmd,0,1	
	Set oShell = Nothing
End Function
</script>

	<script type="text/javascript" language="javascript">
	 <!--
        
        
        function Set(){   // this limits the size of the window opened and positions it
            var l=(screen.width/2 - 1030/2); // centre - half the window width
            var t=(screen.height/5); // where you want it vertically
            self.moveTo(l,t);
            self.resizeTo('1030',screen.height/2); // as you can see, this example opens a longish but squat window, near the task-bar
            window.document.getElementById("sortPercent").style.visibility = "hidden"
            window.document.getElementById("resultTable").style.visibility = "hidden"
            }          
    
        function Minimize(){
            window.innerWidth = 100;
            window.innerHeight = 100;
            window.screenX = screen.width;
            window.screenY = screen.height;
            alwaysLowered = true;
            }

        function Maximize(){
            window.innerWidth = screen.width;
            window.innerHeight = screen.height;
            window.screenX = 0;
            window.screenY = 0;
            alwaysLowered = false;
            }    
	   

		objFSO = new ActiveXObject("Scripting.FileSystemObject");
		ForWriting = 2;
		ForReading = 1;
		ForAppending = 8;
		CreateIt = true;
		dontWantCreateIt = false;
		AsciiMode = 0;  
		UnicodeMode = -1;
		systemDefaultMode = -2;
		var i;
		var j;
		
		function js_yyyymmdd_hhmmss () {
			  now = new Date();
			  year = "" + now.getFullYear();
			  month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
			  day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
			  hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
			  minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
			  second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
			  return year + month + day + "_" + hour + minute + second;
		}



		 
        function DeleteFile(gpath) {
            if (objFSO.FileExists(gpath)) {
                var afile = objFSO.GetFile(gpath);
                afile.Attributes[0];
                afile.Delete();
            }
        }

		 
		function CopyFile(FromFile,ToFile,overwrite) {  // Set overwrite to true or false; FromFile, etc = full paths
		  var f = objFSO.GetFile(FromFile);
		  f.Attributes[0];
		  f.Copy(ToFile,overwrite);
		}

		 
		function MakeFolder(NewFolderName,DesiredPath){
		  NewFolderName = objFSO.CreateFolder(DesiredPath); // 'DesiredFolderPath' : e.g., "C:\\MainFolder\\NewFolderName". 
		}

		 
		function DeleteFolder(){   // where gpath = full folder path
		  if (objFSO.FolderExists(gpath)) {var afolder = objFSO.GetFolder(gpath); afolder.Delete();}
		}

		 
		function CopyFolder(FromFolder,ToFolder,overwrite) {  // where FromFolder, etc = full folder paths
		  var f = objFSO.GetFolder(FromFolder);
		  f.Copy(ToFolder,overwrite);
		}

        function CheckMakeFolder(NewFolderName) {
		  if (objFSO.FolderExists(NewFolderName)) {} else {var afolder = objFSO.CreateFolder(NewFolderName);} 
        }

        function countingDigits(numbersIn){
            var numLength = numbersIn.toString();
            switch(numLength.length) {
                case 1:
                    return '00' + numLength;
                    break;
                case 2:
                    return '0' + numLength;
                    break;
                default:
                    return numbersIn.toString();
            }
        }

        function findMountedOn (outputedFile, mountedNames) {
            var cellHolderArray =[];
            var lineArrayOfObjects = [];
            var mountedArray = mountedNames.split(',');
            var forEachCellObject;
            var tempHolder, n;            
            if (!objFSO.FileExists(outputedFile)) { //check if argument = output file exist
                alert ("No output file to process! \rPlease paste some data into the data area box.");
                window.location.reload();
                return false;
            } else {
                jsObjFolder = objFSO.GetFile(outputedFile);
                if (jsObjFolder.size > 0) { //check if argument = outputedFile file has any contents
                    outputFile = objFSO.OpenTextFile(outputedFile,ForReading,dontWantCreateIt,AsciiMode);
                    while (!outputFile.AtEndOfStream){ 
                        tempHolder = String(outputFile.readline()); //read output file line by line
                        if (tempHolder.length > 0){  //check if each line has content                          
                            if (tempHolder.indexOf('ounted') > 0){ //for each chance of meeting Mounted On string.
                                if(forEachCellObject === undefined){ //very first instance of unanmed object
                                    forEachCellObject = js_yyyymmdd_hhmmss (); //naming the object
                                    window.document[forEachCellObject]={}; //create object at global window document                                   
                                } else {
                                    mountedArray.forEach(function(element){ //using mounted name as object key reference
                                        if (window.document[forEachCellObject][element] === undefined) { //reference to previous object name
                                            window.document[forEachCellObject][element] = 'NA';//set key:value pair of sliceName:PercentValue
                                        } 
                                    });
                                    lineArrayOfObjects.push(window.document[forEachCellObject]); //place completed object into array
                                    forEachCellObject = js_yyyymmdd_hhmmss (); //create a new named object after meeting string 'Mounted On'
                                    window.document[forEachCellObject]={}; //create object at global window document                                      
                                }
                            } else {
                                cellHolderArray = tempHolder.split(',');//create cell arrays for each line read
                                mountedArray.forEach(function(element){ //using mounted name as object key:reference value
                                    if (cellHolderArray[cellHolderArray.length-1] === element) {
                                        window.document[forEachCellObject][element] = cellHolderArray[cellHolderArray.length-2];//set key:value pair of sliceName:PercentValue, using last known object name as reference
                                    } 
                                });
                            }
                        } 
                    }
                    if (outputFile.AtEndOfStream) { //at last line of the entry
                        mountedArray.forEach(function(element){ //using mounted name as object key reference
                            if (window.document[forEachCellObject][element] == undefined) { //reference to previous object name
                                window.document[forEachCellObject][element] = 'NA';//set key:value pair of sliceName:PercentValue
                            } 
                        });                        
                        lineArrayOfObjects.push(window.document[forEachCellObject]);
                     }
                    outputFile.Close();
                    return lineArrayOfObjects;
                }
                else {
                    alert ("No data in output file! \rPlease paste some data into the data area box.");
                    window.location.reload();
                    return false;                    
                }
            }
        }
            

		function Collecting(requestType){//collect textArea box entry
            CheckMakeFolder('.\\input');
            CheckMakeFolder('.\\output');
            var newDateFileName = js_yyyymmdd_hhmmss ();
            
			var dfResults = window.document.getElementById('textAreaDfResult').value;
			var splitdfResults = dfResults.split('\n');
			for( i=0; i < splitdfResults.length; i++) {
                outputFile1 = objFSO.OpenTextFile('.\\input\\' + newDateFileName ,ForAppending,CreateIt,AsciiMode);
                outputFile1.writeline (splitdfResults[i]);//label each results into formatted text file.
                outputFile1.Close();
			}
            removingSpaces('.\\input\\' + newDateFileName,'.\\output\\' + newDateFileName);//using vbscript code here
            var text1 = window.document.getElementById('u01').value;
            var text2 = window.document.getElementById('u02').value;
            var text3 = window.document.getElementById('u03').value; 
            var text4 = window.document.getElementById('var').value;  
            var text5 = window.document.getElementById('u04').value;
            var textAll = '';
            var tableHeader = [];
            if (text1.length > -1) { textAll += text1 + ','; tableHeader.push(text1)}
            if (text2.length > -1) { textAll += text2 + ','; tableHeader.push(text2)}
            if (text3.length > -1) { textAll += text3 + ','; tableHeader.push(text3)}
            if (text4.length > -1) { textAll += text4 + ','; tableHeader.push(text4)}
            if (text5.length > -1) { textAll += text5; tableHeader.push(text5)}
            
                lineArrayOfObjects = findMountedOn ('.\\output\\' + newDateFileName,textAll);

                if (lineArrayOfObjects != false){
                    fileListDiv = window.document.getElementById('resultTable');
                    while (fileListDiv.hasChildNodes()) {   
                        fileListDiv.removeChild(fileListDiv.firstChild);
                    } 
                        window.document.getElementById("resultTable").style.visibility = "visible"
                        var body = window.document.getElementById('resultTable');
                        var tbl  = window.document.createElement("table");
                        var tblBody = window.document.createElement("tbody");  
                            var row = window.document.createElement("tr");       
                            for (col = 0; col < tableHeader.length; col++){
                                // Create a <td> element and a text node, make the text
                                // node the contents of the <td>, and put the <td> at
                                // the end of the table row
                                var cell = window.document.createElement("td");
                                var cellText = window.document.createTextNode(tableHeader[col]);
                                cell.appendChild(cellText);
                                row.appendChild(cell);
                            }
                            // add the row to the end of the table body
                            tblBody.appendChild(row);
                            var mountedArray = textAll.split(',');
                            lineArrayOfObjects.forEach(function(el, index, arr){
                                    row = window.document.createElement("tr");
                                    mountedArray.forEach(function(element){ //using mounted name as object key reference
                                        cell = window.document.createElement("td");
                                        cellText = window.document.createTextNode(lineArrayOfObjects[index][element]);  
                                        //alert (lineArrayOfObjects[index][element] + '\n' + element );
                                        cell.appendChild(cellText);
                                        row.appendChild(cell);
                                    });
                                    tblBody.appendChild(row);                                 
                            });
                    

                        // put the <tbody> in the <table>
                        tbl.appendChild(tblBody);
                        // appends <table> into <body>
                        body.appendChild(tbl);
                        // sets the border attribute of tbl to 2;
                        tbl.setAttribute("border", "2");
                    self.resizeTo('1','1'); 
                    sleepingVB();
                    self.resizeTo('1030',screen.height-50);  
                    var l=(screen.width/2 - 1030/2); // centre - half the window width
                    var t=0; // where you want it vertically
                    self.moveTo(l,t); 
                    
                if (requestType === 'adv'){
                    fileListDiv = window.document.getElementById('resultTable');
                    while (fileListDiv.hasChildNodes()) {   
                        fileListDiv.removeChild(fileListDiv.firstChild);
                    }       
                    
                    window.document.getElementById("resultTable").style.visibility = "visible"
                    var body = window.document.getElementById('resultTable');
                    var tbl  = window.document.createElement("table");
                    var tblBody = window.document.createElement("tbody");  
                        var row = window.document.createElement("tr");       
                        for (col = 0; col < tableHeader.length; col++){
                            // Create a <td> element and a text node, make the text
                            // node the contents of the <td>, and put the <td> at
                            // the end of the table row
                            var cell = window.document.createElement("td");
                            var cellText = window.document.createTextNode(tableHeader[col]);
                            cell.appendChild(cellText);
                            row.appendChild(cell);
                        }
                            tblBody.appendChild(row);
                            var mountedArray = textAll.split(',');
                            lineArrayOfObjects.forEach(function(el, index, arr){
                                    row = window.document.createElement("tr");
                                    mountedArray.forEach(function(element){ //using mounted name as object key reference
                                        cell = window.document.createElement("td");
                                            percentValue = parseInt(lineArrayOfObjects[index][element]);
                                            lowHigh = window.document.getElementById("greenValue").value;
                                            redHigh = window.document.getElementById("amberValue").value;
                                            if (percentValue >= redHigh){
                                                cell.setAttribute("bgcolor", "red")
                                            } else if (percentValue < redHigh && percentValue > lowHigh) {
                                                cell.setAttribute("bgcolor", "yellow")
                                            } else if (percentValue <= lowHigh) {
                                                cell.setAttribute("bgcolor", "green")                                                                
                                            } else {
                                                cell.setAttribute("bgcolor", "transparent")
                                            }
                                        cellText = window.document.createTextNode(lineArrayOfObjects[index][element]);  
                                        //alert (lineArrayOfObjects[index][element] + '\n' + element );
                                        cell.appendChild(cellText);
                                        row.appendChild(cell);
                                    });
                                    tblBody.appendChild(row);                                 
                            });
                        // put the <tbody> in the <table>
                        tbl.appendChild(tblBody);
                        // appends <table> into <body>
                        body.appendChild(tbl);
                        // sets the border attribute of tbl to 2;
                        tbl.setAttribute("border", "2");
                    self.resizeTo('1','1'); 
                    sleepingVB();
                    self.resizeTo('1030',screen.height-50);  
                    var l=(screen.width/2 - 1030/2); // centre - half the window width
                    var t=0; // where you want it vertically
                    self.moveTo(l,t); 
                }  
                DeleteFile('.\\output\\' + newDateFileName);
                DeleteFile('.\\input\\' + newDateFileName);                    
                }
		}



		function jumpToElementsortingValue() {
            window.document.getElementById("sortPercent").style.visibility = "visible"
			window.location.hash = '#greenValue';
		}

		function jumpToElementamberValue(){
			//var tempSelected = document.getElementById("showColor").value;
            while (amberValue.hasChildNodes()) {   
                amberValue.removeChild(amberValue.firstChild);
            }             
			window.location.hash = '#amberValue';
            lowHigh = window.document.getElementById("greenValue").value;
            var optionsArray = [];
                switch(Number(lowHigh)) {
                    case 20:
                    optionsArray = [25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 25:
                    optionsArray = [30,35,40,45,50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 30:
                    optionsArray = [35,40,45,50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 35:
                    optionsArray = [40,45,50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 40:
                    optionsArray = [45,50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 45:
                    optionsArray = [50,55,60,65,70,75,80,85,90,95]
                    break;
                    case 50:
                    optionsArray = [55,60,65,70,75,80,85,90,95]
                    break;
                    case 55:
                    optionsArray = [60,65,70,75,80,85,90,95]
                    break;
                    case 60:
                    optionsArray = [65,70,75,80,85,90,95]
                    break;
                    case 65:
                    optionsArray = [70,75,80,85,90,95]
                    break;
                    case 70:
                    optionsArray = [75,80,85,90,95]
                    break;
                    case 75:
                    optionsArray = [80,85,90,95]
                    break;
                    case 80:
                    optionsArray = [85,90,95]
                    break;
                    case 85:
                    optionsArray = [90,95]
                    break;
                    case 90:
                    optionsArray = [95]
                    break;
                }   
				var select = window.document.getElementById("amberValue"); 
				var options = optionsArray;
                var i;
				for(i = 0; i < options.length; i++) {
					var opt = options[i];
					var el = window.document.createElement("option");
					el.textContent = '  ' + opt + '% ';
					el.value = opt;
					select.appendChild(el);
				}	            
		}

    -->
	</script>
 
</head>
<body onload="Set()">
<table width="80%" border=1>
<tr><td>Paste 'df -h' results here. [Example as below. Please include line with 'Filesystem' & 'Mounted']</td></tr>
<tr><td><TEXTAREA style="Height:200px;Width:95%;font-Size:12;font-weight:normal;";TITLE=""; id="textAreaDfResult"; WRAP=hard>
Filesystem             size   used  avail capacity  Mounted on
/dev/md/dsk/d0         3.9G   1.8G   2.1G    46%    /
/proc                    0K     0K     0K     0%    /proc
mnttab                   0K     0K     0K     0%    /etc/mnttab
fd                       0K     0K     0K     0%    /dev/fd
/dev/md/dsk/d3         1.9G   1.5G   325M    83%    /var
swap                   6.9G    96K   6.9G     1%    /var/run
swap                   6.9G   304K   6.9G     1%    /tmp
/dev/md/dsk/d5         6.9G   3.5G   3.3G    52%    /u02
/dev/md/dsk/d4         9.8G   2.4G   7.3G    25%    /u01
/dev/md/dsk/d6         6.8G   3.8G   2.9G    57%    /u03</TEXTAREA></td></tr>

</table>


     

<table>
<tr><td>Select 'Mounted' name to Extract: </td>
<td><input type="text" id="u01" value="/u01" style="width:40px;"><td>
<td><input type="text" id="u02" value="/u02" style="width:40px;"><td>
<td><input type="text" id="u03" value="/u03" style="width:40px;"><td>
<td><input type="text" id="var" value="/var" style="width:40px;"><td>
<td><input type="text" id="u04" value="/u04" style="width:40px;"><td>    
</tr>    
<tr><td align=left ><input type="button" style="width:140px;height:25px" value="Extract Percentage" onClick="Collecting('basic')" title="Extract percentage values."></td></tr>
<tr><td align=left><input type="button" style="width:140px;height:25px" value="Reset Page" onClick="window.location.reload()" title="Clear page to default."></td></tr>
</table>    
<hr  align="left" width="50%"></hr> 
<div id='resultTable'>   
</div>  
<table width="50%" border=0>

<tr><td align=left><input type="checkbox" name="showColor" id="showColor" onchange="jumpToElementsortingValue()"> <label for="showColor">Colour percentage reporting.</label></td>
</tr>
</table>

    
<div id='sortPercent'>    
<table>
<tr><td><input type="button" style="width:120px;height:25px" value="Put Colour" onClick="Collecting('adv');" title="Create colour report."></td>
<td>Under <select name="greenValue"  id="greenValue" onchange="jumpToElementamberValue()">
	<option disabled selected>Select</option>
	<option value="20">20% </option>
    <option value="25">25% </option>
    <option value="30">30% </option>
    <option value="35">35% </option>
    <option value="40">40% </option>
    <option value="45">45% </option>
	<option value="50">50% </option>
	<option value="55">55% </option>
	<option value="60">60% </option>
	<option value="65">65% </option>
	<option value="70">70% </option>
	<option value="75">75% </option>
	<option value="80">80% </option>
	<option value="85">85% </option>
	<option value="90">90% </option>
</select> is label as green.</td>
</tr>
<tr><td></td><td>In between value is label as yellow percentage.</td></tr>
<tr><td></td><td>Above <select name="amberValue"  id="amberValue">
	<option value="" disabled selected>Select</option>
</select> is label as red.</td></tr>
</table>
</div>


   

</body>
</html>